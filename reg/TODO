xlattice_go/reg/TODO

2013-09-13
    * FIX: ClientMsg does NOT include digsig, so server cannot verify
        that the client knows skPriv

    * move logic for Hello and HelloReply into reg/helloAndReply.go     * DONE
    * move reg/hello.go and tests with suitable mods into ../msg/       * DONE
    * split off pkcs7 stuff into separate files (pkcs7*.go)             * DONE
    * move them to ../crypto                                            * DONE
    * remember to move error messages into ../crypto/errors.go          * DONE

    * longer term xlReg needs to be distributed, using Paxos for
        consensus

2013-09-12
    * EncodePadEncrypt, DecryptUnpadDecode into packets.go              * DONE
    * build and thoroughly test ../cmd/xlReg
    * this stays on main branch
    * deploy on test:44444 as service

    * on regBeta branch figure out how to persist the registry in 
        such a way this it easily loads itself from disk after a 
        crash or reboot
    * when this is stable, merge back into main branch
        - and deploy on test:44444
    * document
    * deploy on salinas:44444

2013-09-11
    * test EncodePadEncrypt                                             * DONE
    * write and test DecryptUnpadDecode                                 * DONE
    * use in crypto_test                                                * DONE

2013-09-06
    * default value for reg TESTING can be 
        - name:     testXLReg                                           * DONE
        - lfs:      ./myReg/                                            * DONE
        - acc port: 33333                                               * DONE
    * default values otherwise
        - name:     xlReg                                               * DONE
        - lfs:      /var/app/xlReg                                      * DONE
        - acc port: 44444                                               * DONE

    * reg.New should set name, id, lfs, ckPriv, skPriv, leave o,        * DONE
        e, p as nil

    * cluster members can and must be viewable as Peers, and so
        can use node/PeerMap to index members

2013-09-04
    * complete crypto_test                                              * DONE
    * repackage so that the same approach can be used in other
        modules
        - presumably most of this moves to ../crypto/
    
