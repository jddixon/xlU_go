package reg;

message XLRegMsg {
    enum Tag {
        // This message is RSA-encrypted using the server's public key.
        Hello       = 1;    // (one-shot)KeyIV, salt, version; init comms cycle
       
        // Response to Hello is silent close OR error OR reply. 
        
        // The server's reply is encrypted using the client's IV + key
        // and PKCS7-padded
        HelloReply  = 2;    // (session) KeyIV2, salt, salt2, version2

        // All other messages are encrypted using the server-provided
        // session key and PKCS7-padded.
    
        User        = 3;    // userName, token OR userID, salt2; + digSig
        UserOK      = 4;    // userName, userID, attrs

        Create      = 5;    // clusterName (must be unique), size <= 64
        CreateReply = 6;    // clusterID, optional size -OR- error

        // Response to Join is clusterID + size -OR- error
        Join        = 7;    // clusterName or ID
        JoinReply   = 8;    // clusterID, size

        Get         = 9;    // clusterID, which = bit vector; -1 = all
        // Response to Get is a list of known members -OR- error
        Members     = 10;    // clusterID, which, tokens

        // Orderly close
        Bye         = 13;    // from client
        Ack         = 14;    // from server; followed by close
        
        Error       = 15;    // errDesc; from server, followed by close
        
    }
    message Token {
	    optional uint64 Attrs       = 1;    // bit field
	    optional bytes  ID          = 2;    // 20 or 32 byte nodeID
        optional bytes  CommsKey    = 3;
        optional bytes  SigKey      = 4;
        repeated string MyEnd       = 5;    // overlay, endPoint
	    optional bytes  DigSig      = 6;    // over fields 1 - 5
	}

    optional Tag    Op          = 1;
    optional bytes  AesIV       = 2;
    optional bytes  AesKey      = 3;
    optional bytes  Salt1       = 4;        // error if len < 8
    optional bytes  Salt2       = 5;        // error if len < 8
    optional uint32 Version     = 6;        // little-endian, so stored D.C.B.A
    optional uint32 Size        = 7;
    optional Token  MySpecs     = 8;
    optional bytes  ClusterID   = 9;        
    optional string ClusterName = 10; 
    optional uint64 Which       = 11;
    repeated Token  Tokens      = 12;       // specs for members

    optional string ErrDesc     = 15;
}

