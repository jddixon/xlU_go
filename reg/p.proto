package reg;

message XLRegMsg {
    enum Tag {
        // This message is RSA-encrypted using the server's public key.
        Hello       = 1;    // (one-shot)KeyIV, salt, version; init comms cycle
       
        // Response to Hello is silent close OR error OR reply. 
        
        // The server's reply is encrypted using the client's IV + key
        // and PKCS7-padded
        HelloReply  = 2;    // (session) KeyIV2, salt, salt2, version2

        // All other messages are encrypted using the server-provided
        // session key and PKCS7-padded.
    
        Client      = 3;    // clientName, token OR clientID
        ClientOK    = 4;    // clientID, attrs

        Create      = 5;    // clusterName (must be unique), size <= 64
        CreateReply = 6;    // clusterID, optional size -OR- error

        // Response to Join is clusterID + size -OR- error
        Join        = 7;    // clusterName or clusterID
        JoinReply   = 8;    // clusterID, size

        Get         = 9;    // clusterID, which = bit vector; -1 = all
        // Response to Get is a list of known members -OR- error
        Members     = 10;    // clusterID, which, tokens

        // Orderly close
        Bye         = 11;    // from client
        Ack         = 12;    // from server; followed by close
        
        Error       = 13;    // errDesc; from server, followed by close
        
    }
    message Token {
        optional string Name        = 1;
	    optional uint64 Attrs       = 2;    // bit field
	    optional bytes  ID          = 3;    // 20 or 32 byte nodeID
        optional bytes  CommsKey    = 4;
        optional bytes  SigKey      = 5;
        // by convention, MyEnds[0] for inter-cluster comms, 
        // MyEnds[1] for cluster-client comms 
        repeated string MyEnds      = 6;    // overlay, endPoint
	    optional bytes  DigSig      = 7;    // over fields present, in order
	}
    optional Tag    Op          = 1;
    optional bytes  AesIV       = 2;
    optional bytes  AesKey      = 3;
    optional bytes  Salt1       = 4;        // error if len < 8
    optional bytes  Salt2       = 5;        // error if len < 8
    optional uint32 Version     = 6;        // little-endian, so stored D.C.B.A
    
    optional string ClientName  = 8;
    optional bytes  ClientID    = 9;
    optional uint64 Attrs       = 10;
    optional Token  ClientSpecs = 11;

    optional bytes  ClusterID   = 13;       
    optional string ClusterName = 14; 
    optional uint32 ClusterSize = 15; 

    optional uint64 Which       = 17;
    repeated Token  Tokens      = 18;       // specs for members
    optional bytes  DigSig      = 19;

    optional string ErrDesc     = 23;
}

